/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ExpertsRouteImport } from './routes/experts'
import { Route as ProtectedRouteRouteImport } from './routes/_protected/route'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CategoriesIndexRouteImport } from './routes/categories/index'
import { Route as CategoriesParentIdRouteImport } from './routes/categories/$parentId'
import { Route as ProtectedDashboardRouteImport } from './routes/_protected/dashboard'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'
import { Route as ProtectedMemberRouteRouteImport } from './routes/_protected/member/route'
import { Route as ProtectedAdminRouteRouteImport } from './routes/_protected/admin/route'
import { Route as ProtectedMemberIndexRouteImport } from './routes/_protected/member/index'
import { Route as ProtectedAdminIndexRouteImport } from './routes/_protected/admin/index'

const ExpertsRoute = ExpertsRouteImport.update({
  id: '/experts',
  path: '/experts',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRouteRoute = ProtectedRouteRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CategoriesIndexRoute = CategoriesIndexRouteImport.update({
  id: '/categories/',
  path: '/categories/',
  getParentRoute: () => rootRouteImport,
} as any)
const CategoriesParentIdRoute = CategoriesParentIdRouteImport.update({
  id: '/categories/$parentId',
  path: '/categories/$parentId',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedDashboardRoute = ProtectedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)
const ProtectedMemberRouteRoute = ProtectedMemberRouteRouteImport.update({
  id: '/member',
  path: '/member',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedAdminRouteRoute = ProtectedAdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedMemberIndexRoute = ProtectedMemberIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedMemberRouteRoute,
} as any)
const ProtectedAdminIndexRoute = ProtectedAdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedAdminRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/experts': typeof ExpertsRoute
  '/admin': typeof ProtectedAdminRouteRouteWithChildren
  '/member': typeof ProtectedMemberRouteRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/categories/$parentId': typeof CategoriesParentIdRoute
  '/categories': typeof CategoriesIndexRoute
  '/admin/': typeof ProtectedAdminIndexRoute
  '/member/': typeof ProtectedMemberIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/experts': typeof ExpertsRoute
  '/login': typeof AuthLoginRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/categories/$parentId': typeof CategoriesParentIdRoute
  '/categories': typeof CategoriesIndexRoute
  '/admin': typeof ProtectedAdminIndexRoute
  '/member': typeof ProtectedMemberIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/experts': typeof ExpertsRoute
  '/_protected/admin': typeof ProtectedAdminRouteRouteWithChildren
  '/_protected/member': typeof ProtectedMemberRouteRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_protected/dashboard': typeof ProtectedDashboardRoute
  '/categories/$parentId': typeof CategoriesParentIdRoute
  '/categories/': typeof CategoriesIndexRoute
  '/_protected/admin/': typeof ProtectedAdminIndexRoute
  '/_protected/member/': typeof ProtectedMemberIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/experts'
    | '/admin'
    | '/member'
    | '/login'
    | '/dashboard'
    | '/categories/$parentId'
    | '/categories'
    | '/admin/'
    | '/member/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/experts'
    | '/login'
    | '/dashboard'
    | '/categories/$parentId'
    | '/categories'
    | '/admin'
    | '/member'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_protected'
    | '/experts'
    | '/_protected/admin'
    | '/_protected/member'
    | '/_auth/login'
    | '/_protected/dashboard'
    | '/categories/$parentId'
    | '/categories/'
    | '/_protected/admin/'
    | '/_protected/member/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
  ExpertsRoute: typeof ExpertsRoute
  CategoriesParentIdRoute: typeof CategoriesParentIdRoute
  CategoriesIndexRoute: typeof CategoriesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/experts': {
      id: '/experts'
      path: '/experts'
      fullPath: '/experts'
      preLoaderRoute: typeof ExpertsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/categories/': {
      id: '/categories/'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof CategoriesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/categories/$parentId': {
      id: '/categories/$parentId'
      path: '/categories/$parentId'
      fullPath: '/categories/$parentId'
      preLoaderRoute: typeof CategoriesParentIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_protected/member': {
      id: '/_protected/member'
      path: '/member'
      fullPath: '/member'
      preLoaderRoute: typeof ProtectedMemberRouteRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/admin': {
      id: '/_protected/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof ProtectedAdminRouteRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/member/': {
      id: '/_protected/member/'
      path: '/'
      fullPath: '/member/'
      preLoaderRoute: typeof ProtectedMemberIndexRouteImport
      parentRoute: typeof ProtectedMemberRouteRoute
    }
    '/_protected/admin/': {
      id: '/_protected/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof ProtectedAdminIndexRouteImport
      parentRoute: typeof ProtectedAdminRouteRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface ProtectedAdminRouteRouteChildren {
  ProtectedAdminIndexRoute: typeof ProtectedAdminIndexRoute
}

const ProtectedAdminRouteRouteChildren: ProtectedAdminRouteRouteChildren = {
  ProtectedAdminIndexRoute: ProtectedAdminIndexRoute,
}

const ProtectedAdminRouteRouteWithChildren =
  ProtectedAdminRouteRoute._addFileChildren(ProtectedAdminRouteRouteChildren)

interface ProtectedMemberRouteRouteChildren {
  ProtectedMemberIndexRoute: typeof ProtectedMemberIndexRoute
}

const ProtectedMemberRouteRouteChildren: ProtectedMemberRouteRouteChildren = {
  ProtectedMemberIndexRoute: ProtectedMemberIndexRoute,
}

const ProtectedMemberRouteRouteWithChildren =
  ProtectedMemberRouteRoute._addFileChildren(ProtectedMemberRouteRouteChildren)

interface ProtectedRouteRouteChildren {
  ProtectedAdminRouteRoute: typeof ProtectedAdminRouteRouteWithChildren
  ProtectedMemberRouteRoute: typeof ProtectedMemberRouteRouteWithChildren
  ProtectedDashboardRoute: typeof ProtectedDashboardRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedAdminRouteRoute: ProtectedAdminRouteRouteWithChildren,
  ProtectedMemberRouteRoute: ProtectedMemberRouteRouteWithChildren,
  ProtectedDashboardRoute: ProtectedDashboardRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
  ExpertsRoute: ExpertsRoute,
  CategoriesParentIdRoute: CategoriesParentIdRoute,
  CategoriesIndexRoute: CategoriesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
